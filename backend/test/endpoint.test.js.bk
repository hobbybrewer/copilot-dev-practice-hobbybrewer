const request = require('supertest');
const app = require('../server');
const fs = require('fs');

describe('Backend Setup Tests', () => {
    test('Test Backend Response', async () => {
        const response = await request(app).get('/');
        expect(response.statusCode).toBe(200);
        expect(response.body.message).toBe('Welcome to the application.');
    });
    test('Test the CORS policy', async () => {
        const response = await request(app).get('/');
        expect(response.headers['access-control-allow-origin']).toBe('*');
    });
});


describe('API Testing / Test the model routes', () => {
    test('Test respond to the GET method', async () => {
        const response = await request(app).get('/api/model');
        expect(response.statusCode).toBe(200);
        //fs.writeFileSync('response.json', response.text);
    });

    test('Test GET /api/model Returning Listings', async () => {
        const response = await request(app).get('/api/model');
        expect(response.statusCode).toBe(200);
        //fs.writeFileSync('response.json', response.text);
        let listingsAndReviews = JSON.parse(response.text).listingsAndReviews;
        expect(Array.isArray(listingsAndReviews)).toBe(true);
    });

    test('Test - GET /api/model/{id}', async () => {
        let response = await request(app).get('/api/model/15469178');        
        expect(response.statusCode).toBe(200);
        //fs.writeFileSync('response1.json', response.text);
        var data = JSON.parse(response.text);
        expect(data).toEqual(expect.objectContaining({ 'name': 'Cozy place in Hong Kong Island' }));
    });

    test('Test - PUT /api/model/{id} & GET /api/model/{id}', async () => {
        let response = await request(app)
            .put('/api/model/15386249')
            .send({
                name: 'Test Listing Update',
                description: 'Test Update Description'
            });
        expect(response.statusCode).toBe(200);
        expect(response.body).toEqual({ "message": "Model was updated successfully." });

        response = await request(app).get('/api/model/15386249');
        //fs.writeFileSync('response2.json', response.text);
        var data = JSON.parse(response.text);
        expect(data).toEqual(expect.objectContaining({ 'name': 'Test Listing Update' }));

    });    

    test('Test - Req100 - GET /api/model/ Geo Location Mapping', async () => {
        var locIndex = 'Barcelona';
        var locIndex = 'Hong Kong';
        var locIndex = 'Beyoglu';
        var locIndex = 'Porta';
        var locIndex = 'Rio De Janeiro';

        var x_forwarded_for_ip = { 
            'Barcelona': '2.152.105.111',
            'Hong Kong': '8.210.96.219',
            'Beyoglu': '78.135.85.96',
            'Porta': '188.83.242.122',
            'Rio De Janeiro': '200.20.0.88'
        }; 
        const response = await request(app).get('/api/model').set('x-forwarded-for-ip', x_forwarded_for_ip[locIndex]);
        let listingsAndReviews = JSON.parse(response.text).listingsAndReviews;
        listingsAndReviews.forEach(elem => {
            expect(elem.address).toEqual(expect.objectContaining({ 'market': locIndex }));
        })
    });

    test('Test - Fix200 - GET /api/model/{id}', async () => {
        let response = await request(app).get('/api/model/102995');        
        expect(response.statusCode).toBe(200);
        var data = JSON.parse(response.text);
        expect(data).toEqual(expect.objectContaining({ 'name': 'UWS Brownstone Prime' }));
    });

});        
